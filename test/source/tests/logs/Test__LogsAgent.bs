' Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
' This product includes software developed at Datadog (https://www.datadoghq.com/).
' Copyright 2022-Today Datadog, Inc.

'----------------------------------------------------------------
' Main setup function.
' @return (object) a configured TestSuite object.
'----------------------------------------------------------------
function TestSuite__LogsAgent() as object
    this = BaseTestSuite()
    this.Name = "LogsAgent"

    this.addTest("WhenLogOk_ThenWriteLog", LogsAgentTest__WhenLogOk_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogOkWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogOkWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogOkWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogOkWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogOkWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogOkWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogOkWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogOkWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogDebug_ThenWriteLog", LogsAgentTest__WhenLogDebug_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogDebugWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogDebugWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogDebugWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogDebugWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogDebugWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogDebugWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogDebugWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogDebugWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogInfo_ThenWriteLog", LogsAgentTest__WhenLogInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogInfoWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogInfoWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogInfoWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogInfoWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogInfoWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogInfoWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogInfoWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogInfoWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogNotice_ThenWriteLog", LogsAgentTest__WhenLogNotice_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogNoticeWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogNoticeWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogNoticeWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogNoticeWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogNoticeWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogNoticeWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogNoticeWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogNoticeWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogWarn_ThenWriteLog", LogsAgentTest__WhenLogWarn_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogWarnWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogWarnWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogWarnWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogWarnWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogWarnWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogWarnWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogWarnWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogWarnWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogError_ThenWriteLog", LogsAgentTest__WhenLogError_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogErrorWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogErrorWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogErrorWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogErrorWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogErrorWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogErrorWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogErrorWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogErrorWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogCritical_ThenWriteLog", LogsAgentTest__WhenLogCritical_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogCriticalWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogCriticalWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogCriticalWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogCriticalWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogCriticalWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogCriticalWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogCriticalWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogCriticalWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogAlert_ThenWriteLog", LogsAgentTest__WhenLogAlert_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogAlertWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogAlertWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogAlertWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogAlertWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogAlertWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogAlertWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogAlertWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogAlertWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenLogEmergency_ThenWriteLog", LogsAgentTest__WhenLogEmergency_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogEmergencyWithCustomAttributes_ThenWriteLog", LogsAgentTest__WhenLogEmergencyWithCustomAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogEmergencyWithGlobalAttributes_ThenWriteLog", LogsAgentTest__WhenLogEmergencyWithGlobalAttributes_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogEmergencyWithUserInfo_ThenWriteLog", LogsAgentTest__WhenLogEmergencyWithUserInfo_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)
    this.addTest("WhenLogEmergencyWithRumContext_ThenWriteLog", LogsAgentTest__WhenLogEmergencyWithRumContext_ThenWriteLog, LogsAgentTest__SetUp, LogsAgentTest__TearDown)

    this.addTest("WhenDoNothing_ThenInitDependencies", LogsAgentTest__WhenDoNothing_ThenInitDependencies, LogsAgentTest__SetUpNoMock, LogsAgentTest__TearDown)
    return this
end function

sub LogsAgentTest__SetUp()
    ' Mocks
    m.testSuite.mockUploader = CreateObject("roSGNode", "MockUploaderTask")
    m.testSuite.mockWriter = CreateObject("roSGNode", "MockWriterTask")

    ' Fake data
    m.testSuite.fakeDeviceModel = IG_GetString(16) 
    m.testSuite.fakeDeviceName = IG_GetString(16) 
    m.testSuite.fakeSite = IG_GetString(3) 
    m.testSuite.fakeClientToken = "pub" + IG_GetString(32)
    m.testSuite.fakeService = IG_GetString(32)
    m.testSuite.fakeEnv = IG_GetString(8)
    m.testSuite.fakeVersion = IG_GetString(8)
    m.testSuite.fakeGlobalUserInfo = {
        id: IG_GetString(16),
        name: IG_GetString(16),
        email: IG_GetString(16) + "@" + IG_GetString(16) + ".com"
    }
    m.testSuite.fakeGlobalContext = {}
    m.testSuite.fakeRumContext = {
        actionId: IG_GetString(32),
        applicationId: IG_GetString(32),
        sessionId: IG_GetString(32),
        viewId: IG_GetString(32)
    }
    for i = 1 to 5
        m.testSuite.fakeGlobalContext[IG_GetString(16) + i.toStr()] = IG_GetOneOf([IG_GetString(12), IG_GetInteger(), IG_GetFloat(), IG_GetBoolean()])
        m.testSuite.fakeGlobalUserInfo[IG_GetString(16) + i.toStr()] = IG_GetOneOf([IG_GetString(12), IG_GetInteger(), IG_GetFloat(), IG_GetBoolean()])
    end for
    m.testSuite.global.addFields({ datadogContext: {}, datadogUserInfo: {}, datadogRumContext: {} })
    m.testSuite.global.setField("datadogContext", {})
    m.testSuite.global.setField("datadogUserInfo", {})
    m.testSuite.global.setField("datadogRumContext", {})

    ' Tested Task
    m.testSuite.testedNode = CreateObject("roSGNode", "datadogroku_LogsAgent")
    m.testSuite.testedNode.deviceName = m.testSuite.fakeDeviceName
    m.testSuite.testedNode.deviceModel = m.testSuite.fakeDeviceModel
    m.testSuite.testedNode.site = m.testSuite.fakeSite
    m.testSuite.testedNode.clientToken = m.testSuite.fakeClientToken
    m.testSuite.testedNode.service = m.testSuite.fakeService
    m.testSuite.testedNode.version = m.testSuite.fakeVersion
    m.testSuite.testedNode.env = m.testSuite.fakeEnv
    m.testSuite.testedNode.uploader = m.testSuite.mockUploader
    m.testSuite.testedNode.writer = m.testSuite.mockWriter
end sub

sub LogsAgentTest__SetUpNoMock()
    ' Fake data
    m.testSuite.site = IG_GetString(3)
    m.testSuite.fakeClientToken = "pub" + IG_GetString(32)
    m.testSuite.fakeService = IG_GetString(32)
    m.testSuite.fakeEnv = IG_GetString(8)
    m.testSuite.fakeGlobalUserInfo = {
        id: IG_GetString(16),
        name: IG_GetString(16),
        email: IG_GetString(16) + "@" + IG_GetString(16) + ".com"
    }
    m.testSuite.fakeGlobalContext = {}
    m.testSuite.fakeRumContext = {
        actionId: IG_GetString(32),
        applicationId: IG_GetString(32),
        sessionId: IG_GetString(32),
        viewId: IG_GetString(32)
    }
    for i = 1 to 5
        m.testSuite.fakeGlobalContext[IG_GetString(16) + i.toStr()] = IG_GetOneOf([IG_GetString(12), IG_GetInteger(), IG_GetFloat(), IG_GetBoolean()])
        m.testSuite.fakeGlobalUserInfo[IG_GetString(16) + i.toStr()] = IG_GetOneOf([IG_GetString(12), IG_GetInteger(), IG_GetFloat(), IG_GetBoolean()])
    end for
    m.testSuite.global.addFields({ datadogContext: {}, datadogUserInfo: {}, datadogRumContext: {} })
    m.testSuite.global.setField("datadogContext", {})
    m.testSuite.global.setField("datadogUserInfo", {})
    m.testSuite.global.setField("datadogRumContext", {})

    ' Tested Task
    m.testSuite.testedNode = CreateObject("roSGNode", "datadogroku_LogsAgent")
    m.testSuite.testedNode.site = m.testSuite.fakeSite
    m.testSuite.testedNode.clientToken = m.testSuite.fakeClientToken
    m.testSuite.testedNode.service = m.testSuite.fakeService
    m.testSuite.testedNode.version = m.testSuite.fakeVersion
    m.testSuite.testedNode.env = m.testSuite.fakeEnv
end sub

sub LogsAgentTest__TearDown()
    m.testSuite.testedNode.writer.control = "STOP"
    m.testSuite.testedNode.uploader.control = "STOP"
    m.testSuite.testedNode.Delete("uploader")
    m.testSuite.testedNode.Delete("writer")
    m.testSuite.Delete("mockUploader")
    m.testSuite.Delete("mockWriter")
    m.testSuite.Delete("testedNode")
end sub

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log ok
'  Then: writes a ok log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogOk_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logOk(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])

    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("ok")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log ok with custom attributes
'  Then: writes a ok log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogOkWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logOk(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("ok")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log ok with global attributes
'  Then: writes a ok log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogOkWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logOk(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("ok")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log ok with user info
'  Then: writes a ok log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogOkWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logOk(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("ok")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log ok with rum context
'  Then: writes a ok log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogOkWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logOk(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("ok")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log debug
'  Then: writes a debug log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogDebug_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logDebug(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("debug")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log debug with custom attributes
'  Then: writes a debug log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogDebugWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logDebug(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("debug")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log debug with global attributes
'  Then: writes a debug log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogDebugWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logDebug(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("debug")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log debug with user info
'  Then: writes a debug log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogDebugWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logDebug(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("debug")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log debug with rum context
'  Then: writes a debug log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogDebugWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logDebug(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])

    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("debug")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log info
'  Then: writes a info log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logInfo(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("info")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log info with custom attributes
'  Then: writes a info log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogInfoWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logInfo(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("info")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log info with global attributes
'  Then: writes a info log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogInfoWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logInfo(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])

    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("info")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log info with user info
'  Then: writes a info log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogInfoWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logInfo(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("info")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log info with rum context
'  Then: writes a info log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogInfoWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logInfo(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("info")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log notice
'  Then: writes a notice log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogNotice_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logNotice(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("notice")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log notice with custom attributes
'  Then: writes a notice log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogNoticeWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logNotice(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("notice")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log notice with global attributes
'  Then: writes a notice log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogNoticeWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logNotice(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("notice")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log notice with user info
'  Then: writes a notice log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogNoticeWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logNotice(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("notice")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log notice with rum context
'  Then: writes a notice log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogNoticeWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logNotice(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("notice")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log warn
'  Then: writes a warn log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogWarn_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logWarn(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("warn")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log warn with custom attributes
'  Then: writes a warn log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogWarnWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logWarn(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("warn")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log warn with global attributes
'  Then: writes a warn log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogWarnWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logWarn(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("warn")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log warn with user info
'  Then: writes a warn log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogWarnWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logWarn(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("warn")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log warn with rum context
'  Then: writes a warn log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogWarnWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logWarn(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("warn")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log error
'  Then: writes a error log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogError_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logError(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("error")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log error with custom attributes
'  Then: writes a error log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogErrorWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logError(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("error")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log error with global attributes
'  Then: writes a error log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogErrorWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logError(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("error")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log error with user info
'  Then: writes a error log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogErrorWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logError(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("error")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log error with rum context
'  Then: writes a error log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogErrorWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logError(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("error")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log critical
'  Then: writes a critical log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogCritical_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logCritical(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("critical")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log critical with custom attributes
'  Then: writes a critical log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogCriticalWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logCritical(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("critical")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log critical with global attributes
'  Then: writes a critical log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogCriticalWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logCritical(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("critical")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log critical with user info
'  Then: writes a critical log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogCriticalWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logCritical(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("critical")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log critical with rum context
'  Then: writes a critical log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogCriticalWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logCritical(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("critical")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log alert
'  Then: writes a alert log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogAlert_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logAlert(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("alert")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log alert with custom attributes
'  Then: writes a alert log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogAlertWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logAlert(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("alert")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log alert with global attributes
'  Then: writes a alert log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogAlertWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logAlert(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("alert")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log alert with user info
'  Then: writes a alert log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogAlertWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logAlert(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("alert")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log alert with rum context
'  Then: writes a alert log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogAlertWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logAlert(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("alert")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log emergency
'  Then: writes a emergency log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogEmergency_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logEmergency(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("emergency")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log emergency with custom attributes
'  Then: writes a emergency log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogEmergencyWithCustomAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logEmergency(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])

    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("emergency")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in fakeAttributes
        Assert.that(logEvent[key]).isEqualTo(fakeAttributes[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log emergency with global attributes
'  Then: writes a emergency log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogEmergencyWithGlobalAttributes_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logEmergency(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("emergency")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    for each key in m.fakeGlobalContext
        Assert.that(logEvent[key]).isEqualTo(m.fakeGlobalContext[key])
    end for
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log emergency with user info
'  Then: writes a emergency log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogEmergencyWithUserInfo_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logEmergency(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("emergency")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.usr).isEqualTo(m.fakeGlobalUserInfo)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: call the log emergency with rum context
'  Then: writes a emergency log
'----------------------------------------------------------------
function LogsAgentTest__WhenLogEmergencyWithRumContext_ThenWriteLog() as string
    ' Given
    fakeMessage = IG_GetString(32)
    fakeAttributes = {}
    for i = 1 to 10
        fakeAttributes[IG_GetString(10)] = IG_GetString(32)
    end for
    m.global.setField("datadogRumContext", m.fakeRumContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedNode@.logEmergency(fakeMessage, fakeAttributes)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    logEvent = ParseJson(updates[0])
    Assert.that(updates).hasSize(1)
    Assert.that(logEvent).isNotInvalid()
    Assert.that(logEvent.date).isInRange(errorTimestamp&, errorTimestamp& + 20)
    Assert.that(logEvent.ddtags).isEqualTo("env:" + m.fakeEnv + ",version:" + m.fakeVersion)
    Assert.that(logEvent.message).isEqualTo(fakeMessage)
    Assert.that(logEvent.service).isEqualTo(m.fakeService)
    Assert.that(logEvent.status).isEqualTo("emergency")
    Assert.that(logEvent.device.type).isEqualTo("tv")
    Assert.that(logEvent.device.name).isEqualTo(m.fakeDeviceName)
    Assert.that(logEvent.device.model).isEqualTo(m.fakeDeviceModel)
    Assert.that(logEvent.device.brand).isEqualTo("Roku")
    Assert.that(logEvent.application_id).isEqualTo(m.fakeRumContext.applicationId)
    Assert.that(logEvent.session_id).isEqualTo(m.fakeRumContext.sessionId)
    Assert.that(logEvent.view.id).isEqualTo(m.fakeRumContext.viewId)
    Assert.that(logEvent.user_action.id).isEqualTo(m.fakeRumContext.actionId)
    return ""
end function

'----------------------------------------------------------------
' Given: a LogsAgent
'  When: initializing
'  Then: ensure the dependencies are created if not present
'----------------------------------------------------------------
function LogsAgentTest__WhenDoNothing_ThenInitDependencies() as string
    ' Given
    m.testedNode.uploader = invalid
    m.testedNode.writer = invalid
    site = IG_GetOneOf(["us1", "us3", "us5", "eu1"])
    m.testedNode.site = site
    expectedUrl = datadogroku_getIntakeUrl(site, "logs")
    expectedTrackName = "logs_" + m.testedNode.threadInfo().node.address

    ' When
    m.testedNode@.logEmergency(IG_GetString(32), {})
    sleep(100)

    ' Then
    writer = m.testedNode.writer
    uploader = m.testedNode.uploader
    Assert.that(writer).isNotInvalid().hasSubtype("datadogroku_WriterTask")
    Assert.that(writer.trackType).isEqualTo("logs")
    Assert.that(writer.payloadSeparator).isEqualTo(",")
    Assert.that(uploader) .isNotInvalid().hasSubtype("datadogroku_MultiTrackUploaderTask")
    Assert.that(uploader.clientToken).isEqualTo(m.fakeClientToken)
    uploaderTracks = uploader.tracks
    Assert.that(uploaderTracks).isNotInvalid().containsKey(expectedTrackName)
    track = uploaderTracks[expectedTrackName]
    Assert.that(track).isNotInvalid().contains({
        url: expectedUrl,
        trackType: "logs",
        payloadPrefix: "[",
        payloadPostfix: "]",
        contentType: "application/json",
        queryParams: { ddsource: "roku" }
    })
    return ""
end function
