' Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
' This product includes software developed at Datadog (https://www.datadoghq.com/).
' Copyright 2022-Today Datadog, Inc.

'----------------------------------------------------------------
' Main setup function.
' @return (object) a configured TestSuite object.
'----------------------------------------------------------------
function TestSuite__RumViewScope() as object
    this = BaseTestSuite()
    this.Name = "RumViewScope"

    this.addTest("WhenInit_ThenUpdateGlobalRumContext", RumViewScopeTest__WhenInit_ThenUpdateGlobalRumContext, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenGetContext_ThenReturnsContext", RumViewScopeTest__WhenGetContext_ThenReturnsContext, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenIsActive_ThenReturnsTrue", RumViewScopeTest__WhenIsActive_ThenReturnsTrue, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenStoppedIsActive_ThenReturnsFalse", RumViewScopeTest__WhenStoppedIsActive_ThenReturnsFalse, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    this.addTest("WhenHandleStopViewEvent_ThenWriteViewUpdate", RumViewScopeTest__WhenHandleStopViewEvent_ThenWriteViewUpdate, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleStopViewEventWithAction_ThenWriteViewUpdate", RumViewScopeTest__WhenHandleStopViewEventWithAction_ThenWriteViewUpdate, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleStopViewEventWithError_ThenWriteViewUpdate", RumViewScopeTest__WhenHandleStopViewEventWithError_ThenWriteViewUpdate, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleStopViewEventWithResource_ThenWriteViewUpdate", RumViewScopeTest__WhenHandleStopViewEventWithResource_ThenWriteViewUpdate, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleStopViewEventTwice_ThenWriteViewEvent", RumViewScopeTest__WhenHandleStopViewEventTwice_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleStartViewEvent_ThenWriteViewEvent", RumViewScopeTest__WhenHandleStartViewEvent_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenStopUnknownView_ThenDoNothing", RumViewScopeTest__WhenStopUnknownView_ThenDoNothing, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    this.addTest("WhenHandleAddErrorEvent_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddErrorEvent_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddErrorEventWithContext_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddErrorEventWithContext_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddErrorEventWithUserInfo_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddErrorEventWithUserInfo_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddErrorEventWithAction_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddErrorEventWithAction_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleEmptyAddErrorEvent_ThenWriteViewEvent", RumViewScopeTest__WhenHandleEmptyAddErrorEvent_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    this.addTest("WhenHandleAddResourceEvent_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddResourceEvent_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddResourceEventWithContext_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddResourceEventWithContext_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddResourceEventWithUserInfo_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddResourceEventWithUserInfo_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddResourceEventWithAction_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddResourceEventWithAction_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddMinimalResourceEvent_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddMinimalResourceEvent_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    this.addTest("WhenHandleAddFailedResourceEvent_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddFailedResourceEvent_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddFailedResourceEventWithContext_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddFailedResourceEventWithContext_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddFailedResourceEventWithUserInfo_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddFailedResourceEventWithUserInfo_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddFailedResourceEventWithAction_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddFailedResourceEventWithAction_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    this.addTest("WhenHandleAddActionEvent_ThenCreateChildScope", RumViewScopeTest__WhenHandleAddActionEvent_ThenCreateChildScope, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddCustomActionEvent_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddCustomActionEvent_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddCustomActionEventWithContext_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddCustomActionEventWithContext_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAddCustomActionEventWithUserInfo_ThenWriteViewEvent", RumViewScopeTest__WhenHandleAddCustomActionEventWithUserInfo_ThenWriteViewEvent, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    this.addTest("WhenHandleAnyEvent_ThenDelegateToActiveActionScope", RumViewScopeTest__WhenHandleAnyEvent_ThenDelegateToActiveActionScope, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleAnyEventActionNotActive_ThenDiscardIt", RumViewScopeTest__WhenHandleAnyEventActionNotActive_ThenDiscardIt, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    this.addTest("WhenHandleKeepAliveEvent_ThenWriteViewUpdate", RumViewScopeTest__WhenHandleKeepAliveEvent_ThenWriteViewUpdate, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleKeepAliveEventWithContext_ThenWriteViewUpdate", RumViewScopeTest__WhenHandleKeepAliveEventWithContext_ThenWriteViewUpdate, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)
    this.addTest("WhenHandleKeepAliveEventWithUserInfo_ThenWriteViewUpdate", RumViewScopeTest__WhenHandleKeepAliveEventWithUserInfo_ThenWriteViewUpdate, RumViewScopeTest__SetUp, RumViewScopeTest__TearDown)

    return this
end function

sub RumViewScopeTest__SetUp()
    ' Mocks
    m.testSuite.mockWriter = CreateObject("roSGNode", "MockWriterTask")
    m.testSuite.mockParentScope = CreateObject("roSGNode", "MockRumScope")
    m.testSuite.mockActionScope = CreateObject("roSGNode", "MockRumScope")

    ' Fake data
    m.testSuite.fakeViewName = IG_GetString(16)
    m.testSuite.fakeViewUrl = "https://" + IG_GetString(32)
    m.testSuite.fakeActionId = IG_GetString(32)
    m.testSuite.mockActionScope@.stubCall("getRumContext", {}, { actionId: m.testSuite.fakeActionId })
    m.testSuite.mockActionScope@.stubCall("isActive", {}, true)
    m.testSuite.fakeGlobalUserInfo = {
        id: IG_GetString(16),
        name: IG_GetString(16),
        email: IG_GetString(16) + "@" + IG_GetString(16) + ".com"
    }
    m.testSuite.fakeGlobalContext = {}
    for i = 1 to 5
        m.testSuite.fakeGlobalContext[IG_GetString(16) + i.toStr()] = IG_GetOneOf([IG_GetString(12), IG_GetInteger(), IG_GetFloat(), IG_GetBoolean()])
        m.testSuite.fakeGlobalUserInfo[IG_GetString(16) + i.toStr()] = IG_GetOneOf([IG_GetString(12), IG_GetInteger(), IG_GetFloat(), IG_GetBoolean()])
    end for
    m.testSuite.global.addFields({ datadogContext: {}, datadogUserInfo: {}, datadogRumContext: {} })

    ' Tested Task
    m.testSuite.startTimestamp& = datadogroku_getTimestamp()
    m.testSuite.testedScope = CreateObject("roSGNode", "datadogroku_RumViewScope")
    m.testSuite.testedScope.parentScope = m.testSuite.mockParentScope
    m.testSuite.testedScope.viewName = m.testSuite.fakeViewName
    m.testSuite.testedScope.viewUrl = m.testSuite.fakeViewUrl
end sub

sub RumViewScopeTest__TearDown()
    m.testSuite.Delete("mockWriter")
    m.testSuite.Delete("mockParentScope")
    m.testSuite.Delete("mockActionScope")
    m.testSuite.Delete("testedScope")
end sub

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: init
'  Then: check the global rum context is updated with the view id
'----------------------------------------------------------------
function RumViewScopeTest__WhenInit_ThenUpdateGlobalRumContext() as string
    ' When
    context = m.testedScope@.getRumContext()

    ' Then
    return m.multipleAssertions([
        m.assertEqual(context.viewId, m.global.datadogRumContext.viewId)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: requesting the rum context
'  Then: returns a rum context with parentScope's context plus sessionId
'----------------------------------------------------------------
function RumViewScopeTest__WhenGetContext_ThenReturnsContext() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeVersion = IG_GetString(16)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        applicationVersion: fakeVersion,
        sessionId: fakeSessionId
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)

    ' When
    context = m.testedScope@.getRumContext()

    ' Then
    return m.multipleAssertions([
        m.assertEqual(context.applicationId, fakeApplicationId),
        m.assertEqual(context.serviceName, fakeServiceName),
        m.assertEqual(context.applicationVersion, fakeVersion),
        m.assertEqual(context.sessionId, fakeSessionId),
        m.assertNotEmpty(context.viewId),
        m.assertEqual(context.viewName, m.fakeViewName)
        m.assertEqual(context.viewUrl, m.fakeViewUrl)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: calling isActive
'  Then: returns a true
'----------------------------------------------------------------
function RumViewScopeTest__WhenIsActive_ThenReturnsTrue() as string
    ' Given

    ' When
    isActive = m.testedScope@.isActive()

    ' Then
    return m.assertEqual(isActive, true)
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: calling stop then isActive
'  Then: returns a false
'----------------------------------------------------------------
function RumViewScopeTest__WhenStoppedIsActive_ThenReturnsFalse() as string
    ' Given
    fakeEvent = { mock: "event", eventType: "stopView", viewName: m.fakeViewName, viewUrl: m.fakeViewUrl }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)
    isActive = m.testedScope@.isActive()

    ' Then
    return m.assertEqual(isActive, false)
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (stopView)
'  Then: writes a view event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleStopViewEvent_ThenWriteViewUpdate() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeEvent = { mock: "event", eventType: "stopView", viewName: m.fakeViewName, viewUrl: m.fakeViewUrl }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    viewEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 1000000, 10000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (stopView) after an action
'  Then: writes a view event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleStopViewEventWithAction_ThenWriteViewUpdate() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeAction = { target: IG_GetString(16), type: IG_GetOneOf(["custom", "click", "tap", "scroll", "swipe", "application_start", "back"]) }
    fakeActionEvent = { mock: "event", eventType: "addAction", action: fakeAction }
    fakeEvent = { mock: "event", eventType: "stopView", viewName: m.fakeViewName, viewUrl: m.fakeViewUrl }

    ' When
    m.testedScope@.handleEvent(fakeActionEvent, m.mockWriter)
    sleep(40)
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    viewEvent = ParseJson(updates[1])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 2),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 45000000, 100000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 1),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (stopView) after an error
'  Then: writes a view event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleStopViewEventWithError_ThenWriteViewUpdate() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeException = { number: IG_GetInteger(255), message: IG_GetString(32), backtrace: IG_GetBacktrace() }
    fakeErrorEvent = { mock: "event", eventType: "addError", exception: fakeException }
    fakeEvent = { mock: "event", eventType: "stopView", viewName: m.fakeViewName, viewUrl: m.fakeViewUrl }

    ' When
    m.testedScope@.handleEvent(fakeErrorEvent, m.mockWriter)
    sleep(40)
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    viewEvent = ParseJson(updates[1])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 2),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 10),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 45000000, 150000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 1),
        m.assertEqual(viewEvent.view.resource.count, 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (stopView) after a resource
'  Then: writes a view event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleStopViewEventWithResource_ThenWriteViewUpdate() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResource = { url: IG_GetString(32), method: IG_GetString(4), status: "ok", httpCode: IG_GetInteger(600), transferTime: IG_GetDouble() }
    fakeResourceEvent = { mock: "event", eventType: "addResource", resource: fakeResource }
    fakeEvent = { mock: "event", eventType: "stopView", viewName: m.fakeViewName, viewUrl: m.fakeViewUrl }

    ' When
    m.testedScope@.handleEvent(fakeResourceEvent, m.mockWriter)
    sleep(40)
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    viewEvent = ParseJson(updates[1])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 2),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 45000000, 100000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 1)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (stopView) twice
'  Then: write a view event but ignores the second stop
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleStopViewEventTwice_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeEvent = { mock: "event", eventType: "stopView", viewName: m.fakeViewName, viewUrl: m.fakeViewUrl }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    viewEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 1000000, 10000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (stopView for an unknown view)
'  Then: do nothing
'----------------------------------------------------------------
function RumViewScopeTest__WhenStopUnknownView_ThenDoNothing() as string
    ' Given
    fakeEvent = { mock: "event", eventType: "stopView", viewName: m.fakeViewName + IG_GetString(8), viewUrl: m.fakeViewUrl + IG_GetString(8) }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (startView) twice
'  Then: write a view event and consider this view stopped
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleStartViewEvent_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeEvent = { mock: "event", eventType: "startView", viewName: IG_GetString(32), viewUrl: IG_GetString(32) }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    viewEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 1000000, 20000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addError)
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddErrorEvent_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeMessage = IG_GetString(128)
    fakeErrorNumber = IG_GetInteger(256)
    fakeBacktrace = IG_GetBacktrace()
    fakeException = { number: fakeErrorNumber, message: fakeMessage, backtrace: fakeBacktrace }
    fakeEvent = { mock: "event", eventType: "addError", exception: fakeException }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, invalid),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, fakeMessage),
        m.assertEqual(errorEvent.error.source, "source"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, datadogroku_backtraceToString(fakeBacktrace)),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, "&h" + datadogroku_decToHex(fakeErrorNumber)),
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global rum context
'  When: handling an event (addError)
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddErrorEventWithContext_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeMessage = IG_GetString(128)
    fakeErrorNumber = IG_GetInteger(256)
    fakeBacktrace = IG_GetBacktrace()
    fakeException = { number: fakeErrorNumber, message: fakeMessage, backtrace: fakeBacktrace }
    fakeEvent = { mock: "event", eventType: "addError", exception: fakeException }
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, invalid),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, fakeMessage),
        m.assertEqual(errorEvent.error.source, "source"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, datadogroku_backtraceToString(fakeBacktrace)),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, "&h" + datadogroku_decToHex(fakeErrorNumber)),
        m.assertEqual(errorEvent.context, m.fakeGlobalContext)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global user info
'  When: handling an event (addError)
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddErrorEventWithUserInfo_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeMessage = IG_GetString(128)
    fakeErrorNumber = IG_GetInteger(256)
    fakeBacktrace = IG_GetBacktrace()
    fakeException = { number: fakeErrorNumber, message: fakeMessage, backtrace: fakeBacktrace }
    fakeEvent = { mock: "event", eventType: "addError", exception: fakeException }
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, invalid),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, fakeMessage),
        m.assertEqual(errorEvent.error.source, "source"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, datadogroku_backtraceToString(fakeBacktrace)),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, "&h" + datadogroku_decToHex(fakeErrorNumber)),
        m.assertEqual(errorEvent.usr, m.fakeGlobalUserInfo)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addError) with an active action
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddErrorEventWithAction_ThenWriteViewEvent() as string
    ' Given
    m.testedScope.activeAction = m.mockActionScope
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeMessage = IG_GetString(128)
    fakeErrorNumber = IG_GetInteger(256)
    fakeBacktrace = IG_GetBacktrace()
    fakeException = { number: fakeErrorNumber, message: fakeMessage, backtrace: fakeBacktrace }
    fakeEvent = { mock: "event", eventType: "addError", exception: fakeException }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, m.fakeActionId),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 10),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, fakeMessage),
        m.assertEqual(errorEvent.error.source, "source"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, datadogroku_backtraceToString(fakeBacktrace)),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, "&h" + datadogroku_decToHex(fakeErrorNumber))
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addError) with missing exception fields
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleEmptyAddErrorEvent_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeEvent = { mock: "event", eventType: "addError", exception: {} }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, invalid),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, "Unknown exception"),
        m.assertEqual(errorEvent.error.source, "source"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, invalid),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, "unknown")
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addResource) ok
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddResourceEvent_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeHttpCode = IG_GetInteger(600)
    fakeDurationNs& = IG_GetInteger()
    nsToSec# = 1000000000
    fakeTransferTime# = fakeDurationNs& / nsToSec#
    fakeSize = IG_GetInteger()
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: "ok", httpCode: fakeHttpCode, transferTime: fakeTransferTime#, bytesDownloaded: fakeSize }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    resourceEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(resourceEvent),
        m.assertEqual(resourceEvent.application.id, fakeApplicationId),
        m.assertEqual(resourceEvent.action.id, invalid),
        m.assertBetween(resourceEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(resourceEvent.service, fakeServiceName),
        m.assertEqual(resourceEvent.session.has_replay, false),
        m.assertNotEmpty(resourceEvent.session.id),
        m.assertEqual(resourceEvent.session.type, "user"),
        m.assertEqual(resourceEvent.source, "roku"),
        m.assertEqual(resourceEvent.type, "resource"),
        m.assertEqual(resourceEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(resourceEvent.view.id),
        m.assertEqual(resourceEvent.view.name, m.fakeViewName),
        m.assertEqual(resourceEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(resourceEvent.resource.id),
        m.assertEqual(resourceEvent.resource.type, "native"),
        m.assertEqual(resourceEvent.resource.method, fakeMethod),
        m.assertEqual(resourceEvent.resource.url, fakeResourceUrl),
        m.assertEqual(resourceEvent.resource.status_code, fakeHttpCode),
        m.assertBetween(resourceEvent.resource.duration, fakeDurationNs& - 1000, fakeDurationNs& + 1000),
        m.assertEqual(resourceEvent.resource.size, fakeSize)
        ' TODO RUMM-2529 assert traceId and spanId
        ' TODO RUMM-2530 assert timings (dns, ssl, …)?
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global rum context
'  When: handling an event (addResource) ok
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddResourceEventWithContext_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeHttpCode = IG_GetInteger(600)
    fakeDurationNs& = IG_GetInteger()
    nsToSec# = 1000000000
    fakeTransferTime# = fakeDurationNs& / nsToSec#
    fakeSize = IG_GetInteger()
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: "ok", httpCode: fakeHttpCode, transferTime: fakeTransferTime#, bytesDownloaded: fakeSize }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    resourceEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(resourceEvent),
        m.assertEqual(resourceEvent.application.id, fakeApplicationId),
        m.assertEqual(resourceEvent.action.id, invalid),
        m.assertBetween(resourceEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(resourceEvent.service, fakeServiceName),
        m.assertEqual(resourceEvent.session.has_replay, false),
        m.assertNotEmpty(resourceEvent.session.id),
        m.assertEqual(resourceEvent.session.type, "user"),
        m.assertEqual(resourceEvent.source, "roku"),
        m.assertEqual(resourceEvent.type, "resource"),
        m.assertEqual(resourceEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(resourceEvent.view.id),
        m.assertEqual(resourceEvent.view.name, m.fakeViewName),
        m.assertEqual(resourceEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(resourceEvent.resource.id),
        m.assertEqual(resourceEvent.resource.type, "native"),
        m.assertEqual(resourceEvent.resource.method, fakeMethod),
        m.assertEqual(resourceEvent.resource.url, fakeResourceUrl),
        m.assertEqual(resourceEvent.resource.status_code, fakeHttpCode),
        m.assertBetween(resourceEvent.resource.duration, fakeDurationNs& - 1000, fakeDurationNs& + 1000),
        m.assertEqual(resourceEvent.resource.size, fakeSize),
        m.assertEqual(resourceEvent.context, m.fakeGlobalContext)
        ' TODO RUMM-2529 assert traceId and spanId
        ' TODO RUMM-2530 assert timings (dns, ssl, …)?
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global user info
'  When: handling an event (addResource) ok
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddResourceEventWithUserInfo_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeHttpCode = IG_GetInteger(600)
    fakeDurationNs& = IG_GetInteger()
    nsToSec# = 1000000000
    fakeTransferTime# = fakeDurationNs& / nsToSec#
    fakeSize = IG_GetInteger()
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: "ok", httpCode: fakeHttpCode, transferTime: fakeTransferTime#, bytesDownloaded: fakeSize }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    resourceEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(resourceEvent),
        m.assertEqual(resourceEvent.application.id, fakeApplicationId),
        m.assertEqual(resourceEvent.action.id, invalid),
        m.assertBetween(resourceEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(resourceEvent.service, fakeServiceName),
        m.assertEqual(resourceEvent.session.has_replay, false),
        m.assertNotEmpty(resourceEvent.session.id),
        m.assertEqual(resourceEvent.session.type, "user"),
        m.assertEqual(resourceEvent.source, "roku"),
        m.assertEqual(resourceEvent.type, "resource"),
        m.assertEqual(resourceEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(resourceEvent.view.id),
        m.assertEqual(resourceEvent.view.name, m.fakeViewName),
        m.assertEqual(resourceEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(resourceEvent.resource.id),
        m.assertEqual(resourceEvent.resource.type, "native"),
        m.assertEqual(resourceEvent.resource.method, fakeMethod),
        m.assertEqual(resourceEvent.resource.url, fakeResourceUrl),
        m.assertEqual(resourceEvent.resource.status_code, fakeHttpCode),
        m.assertBetween(resourceEvent.resource.duration, fakeDurationNs& - 1000, fakeDurationNs& + 1000),
        m.assertEqual(resourceEvent.resource.size, fakeSize),
        m.assertEqual(resourceEvent.usr, m.fakeGlobalUserInfo)
        ' TODO RUMM-2529 assert traceId and spanId
        ' TODO RUMM-2530 assert timings (dns, ssl, …)?
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addResource) with an active action
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddResourceEventWithAction_ThenWriteViewEvent() as string
    ' Given
    m.testedScope.activeAction = m.mockActionScope
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeHttpCode = IG_GetInteger(600)
    fakeDurationNs& = IG_GetInteger()
    nsToSec# = 1000000000
    fakeTransferTime# = fakeDurationNs& / nsToSec#
    fakeSize = IG_GetInteger()
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: "ok", httpCode: fakeHttpCode, transferTime: fakeTransferTime#, bytesDownloaded: fakeSize }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    resourceEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(resourceEvent),
        m.assertEqual(resourceEvent.application.id, fakeApplicationId),
        m.assertEqual(resourceEvent.action.id, m.fakeActionId),
        m.assertBetween(resourceEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(resourceEvent.service, fakeServiceName),
        m.assertEqual(resourceEvent.session.has_replay, false),
        m.assertNotEmpty(resourceEvent.session.id),
        m.assertEqual(resourceEvent.session.type, "user"),
        m.assertEqual(resourceEvent.source, "roku"),
        m.assertEqual(resourceEvent.type, "resource"),
        m.assertEqual(resourceEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(resourceEvent.view.id),
        m.assertEqual(resourceEvent.view.name, m.fakeViewName),
        m.assertEqual(resourceEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(resourceEvent.resource.id),
        m.assertEqual(resourceEvent.resource.type, "native"),
        m.assertEqual(resourceEvent.resource.method, fakeMethod),
        m.assertEqual(resourceEvent.resource.url, fakeResourceUrl),
        m.assertEqual(resourceEvent.resource.status_code, fakeHttpCode),
        m.assertBetween(resourceEvent.resource.duration, fakeDurationNs& - 1000, fakeDurationNs& + 1000),
        m.assertEqual(resourceEvent.resource.size, fakeSize)
        ' TODO RUMM-2529 assert traceId and spanId
        ' TODO RUMM-2530 assert timings (dns, ssl, …)?
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addResource) ok
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddMinimalResourceEvent_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)

    fakeResourceUrl = IG_GetString(128)
    fakeDurationNs& = IG_GetInteger()
    nsToSec# = 1000000000
    fakeTransferTime# = fakeDurationNs& / nsToSec#
    fakeResource = { url: fakeResourceUrl, transferTime: fakeTransferTime# }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    resourceEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(resourceEvent),
        m.assertEqual(resourceEvent.application.id, fakeApplicationId),
        m.assertEqual(resourceEvent.action.id, invalid),
        m.assertBetween(resourceEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(resourceEvent.service, fakeServiceName),
        m.assertEqual(resourceEvent.session.has_replay, false),
        m.assertNotEmpty(resourceEvent.session.id),
        m.assertEqual(resourceEvent.session.type, "user"),
        m.assertEqual(resourceEvent.source, "roku"),
        m.assertEqual(resourceEvent.type, "resource"),
        m.assertEqual(resourceEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(resourceEvent.view.id),
        m.assertEqual(resourceEvent.view.name, m.fakeViewName),
        m.assertEqual(resourceEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(resourceEvent.resource.id),
        m.assertEqual(resourceEvent.resource.type, "native"),
        m.assertEqual(resourceEvent.resource.method, invalid),
        m.assertEqual(resourceEvent.resource.url, fakeResourceUrl),
        m.assertEqual(resourceEvent.resource.status_code, invalid),
        m.assertBetween(resourceEvent.resource.duration, fakeDurationNs& - 1000, fakeDurationNs& + 1000),
        m.assertEqual(resourceEvent.resource.size, invalid)
        ' TODO RUMM-2529 assert traceId and spanId
        ' TODO RUMM-2530 assert timings (dns, ssl, …)?
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addResource) failed
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddFailedResourceEvent_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeStatus = IG_GetOneOf([
        "unknownerror",
        "dnsfailure",
        "dnstimeout",
        "noroutetohost",
        "connectiontimeout",
        "connectionrefused",
        "untrustedcert",
        "expiredcert",
        "nocipher",
        "handshakefailed",
        "generalsocketerror",
        "httperror"
    ])
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: fakeStatus }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, invalid),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, "Failed to perform request"),
        m.assertEqual(errorEvent.error.source, "network"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, invalid),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, fakeStatus),
        m.assertEqual(errorEvent.error.resource.type, "native"),
        m.assertEqual(errorEvent.error.resource.method, fakeMethod),
        m.assertEqual(errorEvent.error.resource.url, fakeResourceUrl)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global rum context
'  When: handling an event (addResource) failed
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddFailedResourceEventWithContext_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeStatus = IG_GetOneOf([
        "unknownerror",
        "dnsfailure",
        "dnstimeout",
        "noroutetohost",
        "connectiontimeout",
        "connectionrefused",
        "untrustedcert",
        "expiredcert",
        "nocipher",
        "handshakefailed",
        "generalsocketerror",
        "httperror"
    ])
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: fakeStatus }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, invalid),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, "Failed to perform request"),
        m.assertEqual(errorEvent.error.source, "network"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, invalid),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, fakeStatus),
        m.assertEqual(errorEvent.error.resource.type, "native"),
        m.assertEqual(errorEvent.error.resource.method, fakeMethod),
        m.assertEqual(errorEvent.error.resource.url, fakeResourceUrl),
        m.assertEqual(errorEvent.context, m.fakeGlobalContext)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global user info
'  When: handling an event (addResource) failed
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddFailedResourceEventWithUserInfo_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeStatus = IG_GetOneOf([
        "unknownerror",
        "dnsfailure",
        "dnstimeout",
        "noroutetohost",
        "connectiontimeout",
        "connectionrefused",
        "untrustedcert",
        "expiredcert",
        "nocipher",
        "handshakefailed",
        "generalsocketerror",
        "httperror"
    ])
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: fakeStatus }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, invalid),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, "Failed to perform request"),
        m.assertEqual(errorEvent.error.source, "network"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, invalid),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, fakeStatus),
        m.assertEqual(errorEvent.error.resource.type, "native"),
        m.assertEqual(errorEvent.error.resource.method, fakeMethod),
        m.assertEqual(errorEvent.error.resource.url, fakeResourceUrl),
        m.assertEqual(errorEvent.usr, m.fakeGlobalUserInfo)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addResource) failed with an active action
'  Then: write an error event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddFailedResourceEventWithAction_ThenWriteViewEvent() as string
    ' Given
    m.testedScope.activeAction = m.mockActionScope
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeResourceUrl = IG_GetString(128)
    fakeMethod = IG_GetOneOf(["GET", "POST", "HEAD", "PUT"])
    fakeStatus = IG_GetOneOf([
        "unknownerror",
        "dnsfailure",
        "dnstimeout",
        "noroutetohost",
        "connectiontimeout",
        "connectionrefused",
        "untrustedcert",
        "expiredcert",
        "nocipher",
        "handshakefailed",
        "generalsocketerror",
        "httperror"
    ])
    fakeResource = { url: fakeResourceUrl, method: fakeMethod, status: fakeStatus }
    fakeEvent = { mock: "event", eventType: "addResource", resource: fakeResource }

    ' When
    errorTimestamp& = datadogroku_getTimestamp()
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    errorEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(errorEvent),
        m.assertEqual(errorEvent.application.id, fakeApplicationId),
        m.assertEqual(errorEvent.action.id, m.fakeActionId),
        m.assertBetween(errorEvent.date, errorTimestamp&, errorTimestamp& + 5),
        m.assertEqual(errorEvent.service, fakeServiceName),
        m.assertEqual(errorEvent.session.has_replay, false),
        m.assertNotEmpty(errorEvent.session.id),
        m.assertEqual(errorEvent.session.type, "user"),
        m.assertEqual(errorEvent.source, "roku"),
        m.assertEqual(errorEvent.type, "error"),
        m.assertEqual(errorEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(errorEvent.view.id),
        m.assertEqual(errorEvent.view.name, m.fakeViewName),
        m.assertEqual(errorEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(errorEvent.error.id),
        m.assertEqual(errorEvent.error.message, "Failed to perform request"),
        m.assertEqual(errorEvent.error.source, "network"),
        m.assertEqual(errorEvent.error.source_type, "roku"),
        m.assertEqual(errorEvent.error.stack, invalid),
        m.assertEqual(errorEvent.error.is_crash, false),
        m.assertEqual(errorEvent.error.type, fakeStatus),
        m.assertEqual(errorEvent.error.resource.type, "native"),
        m.assertEqual(errorEvent.error.resource.method, fakeMethod),
        m.assertEqual(errorEvent.error.resource.url, fakeResourceUrl)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addAction)
'  Then: create a child action scope
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddActionEvent_ThenCreateChildScope() as string
    ' Given
    fakeAction = { target: IG_GetString(16), type: IG_GetOneOf(["click", "tap", "scroll", "swipe", "application_start", "back"]) }
    fakeEvent = { mock: "event", eventType: "addAction", action: fakeAction }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    actionScope = m.testedScope.activeAction
    return m.multipleAssertions([
        m.assertEqual(type(actionScope), "roSGNode"),
        m.assertEqual(actionScope.subType(), "datadogroku_RumActionScope"),
        m.assertEqual(actionScope.target, fakeAction.target),
        m.assertEqual(actionScope.actionType, fakeAction.type)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (addAction) type=custom
'  Then: write a custom action event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddCustomActionEvent_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeAction = { target: IG_GetString(16), type: "custom" }
    fakeEvent = { mock: "event", eventType: "addAction", action: fakeAction }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)
    sleep(50)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    actionEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(actionEvent),
        m.assertEqual(actionEvent.application.id, fakeApplicationId),
        m.assertBetween(actionEvent.date, m.startTimestamp&, m.startTimestamp& + 50),
        m.assertEqual(actionEvent.service, fakeServiceName),
        m.assertEqual(actionEvent.session.has_replay, false),
        m.assertNotEmpty(actionEvent.session.id),
        m.assertEqual(actionEvent.session.type, "user"),
        m.assertEqual(actionEvent.source, "roku"),
        m.assertEqual(actionEvent.type, "action"),
        m.assertEqual(actionEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(actionEvent.view.id),
        m.assertEqual(actionEvent.view.name, m.fakeViewName),
        m.assertEqual(actionEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(actionEvent.action.id),
        m.assertEqual(actionEvent.action.type, "custom"),
        m.assertEqual(actionEvent.action.loading_time, 0),
        m.assertEqual(actionEvent.action.target.name, fakeAction.target),
        m.assertEqual(actionEvent.action.error.count, 0),
        m.assertEqual(actionEvent.action.resource.count, 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global rum context
'  When: handling an event (addAction) type=custom
'  Then: write a custom action event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddCustomActionEventWithContext_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeAction = { target: IG_GetString(16), type: "custom" }
    fakeEvent = { mock: "event", eventType: "addAction", action: fakeAction }
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)
    sleep(50)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    actionEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(actionEvent),
        m.assertEqual(actionEvent.application.id, fakeApplicationId),
        m.assertBetween(actionEvent.date, m.startTimestamp&, m.startTimestamp& + 50),
        m.assertEqual(actionEvent.service, fakeServiceName),
        m.assertEqual(actionEvent.session.has_replay, false),
        m.assertNotEmpty(actionEvent.session.id),
        m.assertEqual(actionEvent.session.type, "user"),
        m.assertEqual(actionEvent.source, "roku"),
        m.assertEqual(actionEvent.type, "action"),
        m.assertEqual(actionEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(actionEvent.view.id),
        m.assertEqual(actionEvent.view.name, m.fakeViewName),
        m.assertEqual(actionEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(actionEvent.action.id),
        m.assertEqual(actionEvent.action.type, "custom"),
        m.assertEqual(actionEvent.action.loading_time, 0),
        m.assertEqual(actionEvent.action.target.name, fakeAction.target),
        m.assertEqual(actionEvent.action.error.count, 0),
        m.assertEqual(actionEvent.action.resource.count, 0),
        m.assertEqual(actionEvent.context, m.fakeGlobalContext)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global user info
'  When: handling an event (addAction) type=custom
'  Then: write a custom action event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAddCustomActionEventWithUserInfo_ThenWriteViewEvent() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeAction = { target: IG_GetString(16), type: "custom" }
    fakeEvent = { mock: "event", eventType: "addAction", action: fakeAction }
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)
    sleep(50)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    actionEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(actionEvent),
        m.assertEqual(actionEvent.application.id, fakeApplicationId),
        m.assertBetween(actionEvent.date, m.startTimestamp&, m.startTimestamp& + 50),
        m.assertEqual(actionEvent.service, fakeServiceName),
        m.assertEqual(actionEvent.session.has_replay, false),
        m.assertNotEmpty(actionEvent.session.id),
        m.assertEqual(actionEvent.session.type, "user"),
        m.assertEqual(actionEvent.source, "roku"),
        m.assertEqual(actionEvent.type, "action"),
        m.assertEqual(actionEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(actionEvent.view.id),
        m.assertEqual(actionEvent.view.name, m.fakeViewName),
        m.assertEqual(actionEvent.view.url, m.fakeViewUrl),
        m.assertNotEmpty(actionEvent.action.id),
        m.assertEqual(actionEvent.action.type, "custom"),
        m.assertEqual(actionEvent.action.loading_time, 0),
        m.assertEqual(actionEvent.action.target.name, fakeAction.target),
        m.assertEqual(actionEvent.action.error.count, 0),
        m.assertEqual(actionEvent.action.resource.count, 0),
        m.assertEqual(actionEvent.usr, m.fakeGlobalUserInfo)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: calling handleEvent (type=any)
'  Then: delegates the event to the child scope
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAnyEvent_ThenDelegateToActiveActionScope() as string
    ' Given
    mockScope = CreateObject("roSGNode", "MockRumScope")
    mockScope@.stubCall("isActive", {}, true)
    m.testedScope.activeAction = mockScope
    fakeEvent = { mock: "event", eventType: "any" }
    fakeWriter = { mock: "writer" }

    ' When
    m.testedScope@.handleEvent(fakeEvent, fakeWriter)

    ' Then
    return m.multipleAssertions([
        m.assertEqual(m.testedScope.activeAction.subtype(), "MockRumScope"),
        mockScope@.assertFunctionCalled("handleEvent", { event: fakeEvent, writer: fakeWriter })
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: calling handleEvent (type=any)
'  Then: delegates the event to the child scope
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleAnyEventActionNotActive_ThenDiscardIt() as string
    ' Given
    mockScope = CreateObject("roSGNode", "MockRumScope")
    mockScope@.stubCall("isActive", {}, false)
    m.testedScope.activeAction = mockScope
    fakeEvent = { mock: "event", eventType: "any" }
    fakeWriter = { mock: "writer" }

    ' When
    m.testedScope@.handleEvent(fakeEvent, fakeWriter)
    datadogroku_ddLogVerbose("Back from handleEvent " + TF_Utils__AsString(m.testedScope.activeAction))
    sleep(50)

    ' Then
    return m.multipleAssertions([
        m.assertEqual(m.testedScope.activeAction, invalid),
        mockScope@.assertFunctionCalled("handleEvent", { event: fakeEvent, writer: fakeWriter })
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope
'  When: handling an event (keep alive)
'  Then: writes a view event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleKeepAliveEvent_ThenWriteViewUpdate() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeEvent = { mock: "event", eventType: "keepAlive" }

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    viewEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 1000000, 10000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 0)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global rum context
'  When: handling an event (keep alive)
'  Then: writes a view event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleKeepAliveEventWithContext_ThenWriteViewUpdate() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeEvent = { mock: "event", eventType: "keepAlive" }
    m.global.setField("datadogContext", m.fakeGlobalContext)

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    viewEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 1000000, 10000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 0),
        m.assertEqual(viewEvent.context, m.fakeGlobalContext)
    ])
end function

'----------------------------------------------------------------
' Given: a RumViewScope and a global user info
'  When: handling an event (keep alive)
'  Then: writes a view event
'----------------------------------------------------------------
function RumViewScopeTest__WhenHandleKeepAliveEventWithUserInfo_ThenWriteViewUpdate() as string
    ' Given
    fakeApplicationId = IG_GetString(32)
    fakeApplicationVersion = IG_GetString(32)
    fakeServiceName = IG_GetString(32)
    fakeSessionId = IG_GetString(32)
    fakeParentContext = {
        applicationId: fakeApplicationId,
        serviceName: fakeServiceName,
        sessionId: fakeSessionId,
        applicationVersion: fakeApplicationVersion
    }
    m.mockParentScope@.stubCall("getRumContext", {}, fakeParentContext)
    fakeEvent = { mock: "event", eventType: "keepAlive" }
    m.global.setField("datadogUserInfo", m.fakeGlobalUserInfo)

    ' When
    m.testedScope@.handleEvent(fakeEvent, m.mockWriter)

    ' Then
    updates = m.mockWriter@.getFieldUpdates("writeEvent")
    if (updates.count() = 0)
        return "Expected writeEvent to be updated"
    end if
    viewEvent = ParseJson(updates[0])
    return m.multipleAssertions([
        m.assertEqual(updates.count(), 1),
        m.assertNotInvalid(viewEvent),
        m.assertEqual(viewEvent._dd.document_version, 1),
        m.assertEqual(viewEvent.application.id, fakeApplicationId),
        m.assertBetween(viewEvent.date, m.startTimestamp&, m.startTimestamp& + 5),
        m.assertEqual(viewEvent.service, fakeServiceName),
        m.assertEqual(viewEvent.session.has_replay, false),
        m.assertNotEmpty(viewEvent.session.id),
        m.assertEqual(viewEvent.session.type, "user"),
        m.assertEqual(viewEvent.source, "roku"),
        m.assertEqual(viewEvent.type, "view"),
        m.assertEqual(viewEvent.version, fakeApplicationVersion),
        m.assertNotEmpty(viewEvent.view.id),
        m.assertEqual(viewEvent.view.name, m.fakeViewName),
        m.assertBetween(viewEvent.view.time_spent, 1000000, 10000000),
        m.assertEqual(viewEvent.view.url, m.fakeViewUrl),
        m.assertEqual(viewEvent.view.action.count, 0),
        m.assertEqual(viewEvent.view.error.count, 0),
        m.assertEqual(viewEvent.view.resource.count, 0),
        m.assertEqual(viewEvent.usr, m.fakeGlobalUserInfo)
    ])
end function
