' Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
' This product includes software developed at Datadog (https://www.datadoghq.com/).
' Copyright 2022-Today Datadog, Inc.

'----------------------------------------------------------------
' Main setup function.
' @return (object) a configured TestSuite object.
'----------------------------------------------------------------
function TestSuite__RumAgent() as object
    this = BaseTestSuite()
    this.Name = "RumAgent"

    this.addTest("WhenStartView_ThenDelegateToRumScope", RumAgentTest__WhenStartView_ThenDelegateToRumScope, RumAgentTest__SetUp, RumAgentTest__TearDown)
    this.addTest("WhenStopView_ThenDelegateToRumScope", RumAgentTest__WhenStopView_ThenDelegateToRumScope, RumAgentTest__SetUp, RumAgentTest__TearDown)
    this.addTest("WhenAddAction_ThenDelegateToRumScope", RumAgentTest__WhenAddAction_ThenDelegateToRumScope, RumAgentTest__SetUp, RumAgentTest__TearDown)
    this.addTest("WhenAddError_ThenDelegateToRumScope", RumAgentTest__WhenAddError_ThenDelegateToRumScope, RumAgentTest__SetUp, RumAgentTest__TearDown)
    this.addTest("WhenAddResource_ThenDelegateToRumScope", RumAgentTest__WhenAddResource_ThenDelegateToRumScope, RumAgentTest__SetUp, RumAgentTest__TearDown)

    this.addTest("WhenAddConfigTelemetry_ThenDelegateToTelemetryScope", RumAgentTest__WhenAddConfigTelemetry_ThenDelegateToTelemetryScope, RumAgentTest__SetUp, RumAgentTest__TearDown)
    this.addTest("WhenAddErrorTelemetry_ThenDelegateToTelemetryScope", RumAgentTest__WhenAddErrorTelemetry_ThenDelegateToTelemetryScope, RumAgentTest__SetUp, RumAgentTest__TearDown)
    this.addTest("WhenAddDebugTelemetry_ThenDelegateToTelemetryScope", RumAgentTest__WhenAddDebugTelemetry_ThenDelegateToTelemetryScope, RumAgentTest__SetUp, RumAgentTest__TearDown)

    this.addTest("WhenDoNothing_ThenTriggerKeepAlive", RumAgentTest__WhenDoNothing_ThenTriggerKeepAlive, RumAgentTest__SetUp, RumAgentTest__TearDown)

    this.addTest("WhenDoNothing_ThenInitDependencies", RumAgentTest__WhenDoNothing_ThenInitDependencies, RumAgentTest__SetUpNoMock, RumAgentTest__TearDown)

    return this
end function

sub RumAgentTest__SetUp()
    ' Mocks
    m.testSuite.mockUploader = CreateObject("roSGNode", "MockUploaderTask")
    m.testSuite.mockWriter = CreateObject("roSGNode", "MockWriterTask")
    m.testSuite.mockRumScope = CreateObject("roSGNode", "MockRumScope")
    m.testSuite.mockTelemetryScope = CreateObject("roSGNode", "MockRumScope")

    ' Fake data
    m.testSuite.fakeSite = IG_GetString(3)
    m.testSuite.fakeClientToken = "pub" + IG_GetString(32)
    m.testSuite.fakeApplicationId = IG_GetString(32)
    m.testSuite.fakeService = IG_GetString(32)
    m.testSuite.fakeVersion = IG_GetString(32)
    m.testSuite.fakeKeepAliveDelayMs = 10 + IG_GetInteger(30)

    ' Tested Task
    m.testSuite.testedNode = CreateObject("roSGNode", "datadogroku_RumAgent")
    m.testSuite.testedNode.uploader = m.testSuite.mockUploader
    m.testSuite.testedNode.writer = m.testSuite.mockWriter
    m.testSuite.testedNode.rumScope = m.testSuite.mockRumScope
    m.testSuite.testedNode.telemetryScope = m.testSuite.mockTelemetryScope
    m.testSuite.testedNode.keepAliveDelayMs = m.testSuite.fakeKeepAliveDelayMs
    m.testSuite.testedNode.site = m.testSuite.fakeSite
    m.testSuite.testedNode.clientToken = m.testSuite.fakeClientToken
    m.testSuite.testedNode.applicationId = m.testSuite.fakeApplicationId
    m.testSuite.testedNode.service = m.testSuite.fakeService
    m.testSuite.testedNode.version = m.testSuite.fakeVersion
end sub

sub RumAgentTest__SetUpNoMock()

    ' Fake data
    m.testSuite.fakeSite = IG_GetString(10) + "." + IG_GetString(3)
    m.testSuite.fakeClientToken = "pub" + IG_GetString(32)
    m.testSuite.fakeApplicationId = IG_GetString(32)
    m.testSuite.fakeService = IG_GetString(32)
    m.testSuite.fakeKeepAliveDelayMs = 10 + IG_GetInteger(30)

    ' Tested Task
    m.testSuite.testedNode = CreateObject("roSGNode", "datadogroku_RumAgent")
    m.testSuite.testedNode.keepAliveDelayMs = m.testSuite.fakeKeepAliveDelayMs
    m.testSuite.testedNode.site = m.testSuite.fakeSite
    m.testSuite.testedNode.clientToken = m.testSuite.fakeClientToken
    m.testSuite.testedNode.applicationId = m.testSuite.fakeApplicationId
    m.testSuite.testedNode.service = m.testSuite.fakeService
    m.testSuite.testedNode.version = m.testSuite.fakeVersion
end sub

sub RumAgentTest__TearDown()
    m.testSuite.testedNode.control = "STOP"
    m.testSuite.testedNode.writer.control = "STOP"
    m.testSuite.testedNode.uploader.control = "STOP"
    m.testSuite.testedNode.Delete("uploader")
    m.testSuite.testedNode.Delete("writer")
    m.testSuite.Delete("mockUploader")
    m.testSuite.Delete("mockWriter")
    m.testSuite.Delete("mockRumScope")
    m.testSuite.Delete("testedNode")
end sub

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the startView method
'  Then: delegates to the root RumScope
'----------------------------------------------------------------
function RumAgentTest__WhenStartView_ThenDelegateToRumScope() as string
    ' Given
    fakeViewName = IG_GetString(32)
    fakeViewUrl = IG_GetString(32)

    ' When
    m.testedNode@.startView(fakeViewName, fakeViewUrl)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "startView", viewName: fakeViewName, viewUrl: fakeViewUrl }, writer: m.mockWriter }
    return m.mockRumScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the stopView method
'  Then: delegates to the root RumScope
'----------------------------------------------------------------
function RumAgentTest__WhenStopView_ThenDelegateToRumScope() as string
    ' Given
    fakeViewName = IG_GetString(32)
    fakeViewUrl = IG_GetString(32)

    ' When
    m.testedNode@.stopView(fakeViewName, fakeViewUrl)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "stopView", viewName: fakeViewName, viewUrl: fakeViewUrl }, writer: m.mockWriter }
    return m.mockRumScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the addAction method
'  Then: delegates to the root RumScope
'----------------------------------------------------------------
function RumAgentTest__WhenAddAction_ThenDelegateToRumScope() as string
    ' Given
    fakeAction = { target: IG_GetString(128), type: IG_GetString(128) }

    ' When
    m.testedNode@.addAction(fakeAction)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "addAction", action: fakeAction }, writer: m.mockWriter }
    return m.mockRumScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the addError method
'  Then: delegates to the root RumScope
'----------------------------------------------------------------
function RumAgentTest__WhenAddError_ThenDelegateToRumScope() as string
    ' Given
    fakeException = { number: IG_GetInteger(128), message: IG_GetString(128), backtrace: [] }

    ' When
    m.testedNode@.addError(fakeException)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "addError", exception: fakeException }, writer: m.mockWriter }
    return m.mockRumScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the addResource method
'  Then: delegates to the root RumScope
'----------------------------------------------------------------
function RumAgentTest__WhenAddResource_ThenDelegateToRumScope() as string
    ' Given
    fakeResource = { url: IG_GetString(128), method: IG_GetString(5), transferTime: IG_GetFloat() }

    ' When
    m.testedNode@.addResource(fakeResource)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "addResource", resource: fakeResource }, writer: m.mockWriter }
    return m.mockRumScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the addConfigTelemetry method
'  Then: delegates to the root TelemetryScope
'----------------------------------------------------------------
function RumAgentTest__WhenAddConfigTelemetry_ThenDelegateToTelemetryScope() as string
    ' Given
    fakeConfiguration = { sessionSamplingRate: IG_GetInteger() }

    ' When
    m.testedNode@.addConfigTelemetry(fakeConfiguration)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "telemetryConfig", configuration: fakeConfiguration }, writer: m.mockWriter }
    return m.mockTelemetryScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the addErrorTelemetry method
'  Then: delegates to the root TelemetryScope
'----------------------------------------------------------------
function RumAgentTest__WhenAddErrorTelemetry_ThenDelegateToTelemetryScope() as string
    ' Given
    fakeException = { number: IG_GetInteger(128), message: IG_GetString(128), backtrace: [] }

    ' When
    m.testedNode@.addErrorTelemetry(fakeException)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "telemetryError", exception: fakeException }, writer: m.mockWriter }
    return m.mockTelemetryScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: call the addDebugTelemetry method
'  Then: delegates to the root TelemetryScope
'----------------------------------------------------------------
function RumAgentTest__WhenAddDebugTelemetry_ThenDelegateToTelemetryScope() as string
    ' Given
    fakeMessage = IG_GetString(128)

    ' When
    m.testedNode@.addDebugTelemetry(fakeMessage)
    sleep(30)

    ' Then
    expectedArgs = { event: { eventType: "telemetryDebug", message: fakeMessage }, writer: m.mockWriter }
    return m.mockTelemetryScope@.assertFunctionCalled("handleEvent", expectedArgs)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: nothing
'  Then: sends keep alive regularly
'----------------------------------------------------------------
function RumAgentTest__WhenDoNothing_ThenTriggerKeepAlive() as string
    ' Given
    wait3 = 5 * m.fakeKeepAliveDelayMs

    ' When
    sleep(wait3)

    ' Then
    expectedArgs = { event: { eventType: "keepAlive" }, writer: m.mockWriter }
    return m.mockRumScope@.assertFunctionCalled("handleEvent", expectedArgs, -3)
end function

'----------------------------------------------------------------
' Given: a RumAgent
'  When: initializing
'  Then: ensure the dependencies are created if not present
'----------------------------------------------------------------
function RumAgentTest__WhenDoNothing_ThenInitDependencies() as string
    ' Given
    m.testedNode.uploader = invalid
    m.testedNode.writer = invalid
    m.testedNode.rumScope = invalid
    site = IG_GetOneOf(["us1", "us3", "us5", "eu1"])
    m.testedNode.site = site
    expectedUrl = datadogroku_getIntakeUrl(site, "rum")
    expectedTrackName = "rum_" + m.testedNode.threadInfo().node.address

    ' When
    sleep(100)

    ' Then
    rumScope = m.testedNode.rumScope
    writer = m.testedNode.writer
    uploader = m.testedNode.uploader
    Assert.that(rumScope).isNotInvalid().hasSubtype("datadogroku_RumApplicationScope")
    Assert.that(rumScope.applicationId).isEqualTo(m.fakeApplicationId)
    Assert.that(rumScope.service).isEqualTo(m.fakeService)
    Assert.that(rumScope.version).isEqualTo(m.fakeVersion)
    Assert.that(rumScope).isNotInvalid().hasSubtype("datadogroku_RumApplicationScope")
    Assert.that(writer).isNotInvalid().hasSubtype("datadogroku_WriterTask")
    Assert.that(writer.trackType).isEqualTo("rum")
    Assert.that(writer.payloadSeparator).isEqualTo(chr(10))
    Assert.that(uploader) .isNotInvalid().hasSubtype("datadogroku_MultiTrackUploaderTask")
    Assert.that(uploader.clientToken).isEqualTo(m.fakeClientToken)
    uploaderTracks = uploader.tracks
    Assert.that(uploaderTracks).isNotInvalid().containsKey(expectedTrackName)
    track = uploaderTracks[expectedTrackName]
    Assert.that(track).isNotInvalid().contains({
        url: expectedUrl,
        trackType: "rum",
        payloadPrefix: "",
        payloadPostfix: "",
        contentType: "text/plain;charset=UTF-8",
        queryParams: { ddsource: "roku", ddtags: "sdk_version:1.0.0-dev" }
    })
    return ""
end function
