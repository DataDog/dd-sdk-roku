' Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
' This product includes software developed at Datadog (https://www.datadoghq.com/).
' Copyright 2022-Today Datadog, Inc.

'----------------------------------------------------------------
' Main setup function.
' @return A configured TestSuite object.
'----------------------------------------------------------------
function TestSuite__DdUrlTransfer() as object
    this = BaseTestSuite()
    this.Name = "DdUrlTransfer"

    this.addTest("WhenIsValidHost_ThenReturnsHeaderType", DdUrlTransferTest__WhenIsValidHost_ThenReturnsHeaderType)
    ' this.addTest("WhenIsValidHostWithSingleHost_ThenReturnsHeaderType", DdUrlTransferTest__WhenIsValidHostWithSingleHost_ThenReturnsHeaderType)
    ' this.addTest("WhenIsValidHostWithUnknownHost_ThenReturnsInvalid", DdUrlTransferTest__WhenIsValidHostWithUnknownHost_ThenReturnsInvalid)
    ' this.addTest("WhenIsValidHostWithNoHost_ThenReturnsInvalid", DdUrlTransferTest__WhenIsValidHostWithNoHost_ThenReturnsInvalid)
    ' this.addTest("WhenIsValidHostWithNonUrl_ThenReturnsInvalid", DdUrlTransferTest__WhenIsValidHostWithNonUrl_ThenReturnsInvalid)

    return this
end function

'----------------------------------------------------------------
' Given:
'  When: call getTracedHeaderType with a url with host in the validhost list
'  Then: returns the header type
'----------------------------------------------------------------
function DdUrlTransferTest__WhenIsValidHost_ThenReturnsHeaderType() as string
    ' Given
    validHosts = {}
    hosts = []

    for i = 0 to 10
        host = IG_GetString(12) + "." + IG_GetString(3)
        hosts.Push(host)
        validHosts[host] = IG_GetOneOf(["b3", "datadog", "b3multi", "tracecontext"])
    end for
    validHost = hosts[IG_GetIntegerInRange(0, 10)]
    expectedType = validHosts[validHost]
    url = "https://" + validHost + "/" + IG_GetString(16)

    ' When
    result = datadogroku_getTracedHeaderType(url, validHosts)

    ' Then
    Assert.that(result).isEqualTo(expectedType)
    return ""
end function

'----------------------------------------------------------------
' Given:
'  When: call getTracedHeaderType with a url with host in the validhost list
'  Then: returns the header type
'----------------------------------------------------------------
function DdUrlTransferTest__WhenIsValidHostWithSingleHost_ThenReturnsHeaderType() as string
    ' Given
    validHost = IG_GetString(12) + "." + IG_GetString(3)
    headerType = IG_GetOneOf(["b3", "datadog", "b3multi", "tracecontext"])
    validHosts = {}
    validHosts[validHost] = headerType
    url = "https://" + validHost + "/" + IG_GetString(16)

    ' When
    result = datadogroku_getTracedHeaderType(url, validHosts)

    ' Then
    Assert.that(result).isEqualTo(headerType)
    return ""
end function

'----------------------------------------------------------------
' Given:
'  When: call getTracedHeaderType with a url with host not in the validhost list
'  Then: returns invalid
'----------------------------------------------------------------
function DdUrlTransferTest__WhenIsValidHostWithUnknownHost_ThenReturnsInvalid() as string
    ' Given
    validHosts = []
    for i = 0 to 10
        validHosts.Push(IG_GetString(12) + "." + IG_GetString(3))
    end for
    url = "https://" + IG_GetString(8) + "." + IG_GetString(2) + "/" + IG_GetString(16)

    ' When
    result = datadogroku_getTracedHeaderType(url, validHosts)

    ' Then
    Assert.that(result).isFalse()
    return ""
end function

'----------------------------------------------------------------
' Given:
'  When: call getTracedHeaderType with a url with host not in the validhost list (empty)
'  Then: returns invalid
'----------------------------------------------------------------
function DdUrlTransferTest__WhenIsValidHostWithNoHost_ThenReturnsInvalid() as string
    ' Given
    validHosts = []
    url = "https://" + IG_GetString(8) + "." + IG_GetString(2) + "/" + IG_GetString(16)

    ' When
    result = datadogroku_getTracedHeaderType(url, validHosts)

    ' Then
    Assert.that(result).isFalse()
    return ""
end function

'----------------------------------------------------------------
' Given:
'  When: call getTracedHeaderType with a string not a url
'  Then: returns invalid
'----------------------------------------------------------------
function DdUrlTransferTest__WhenIsValidHostWithNonUrl_ThenReturnsInvalid() as string
    ' Given
    validHosts = []
    for i = 0 to 10
        validHosts.Push(IG_GetString(12) + "." + IG_GetString(3))
    end for
    url = IG_GetString(64)

    ' When
    result = datadogroku_getTracedHeaderType(url, validHosts)

    ' Then
    Assert.that(result).isFalse()
    return ""
end function
