' Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
' This product includes software developed at Datadog (https://www.datadoghq.com/).
' Copyright 2022-Today Datadog, Inc.

'----------------------------------------------------------------
' Main setup function.
' @return (object) a configured TestSuite object.
'----------------------------------------------------------------
function TestSuite__MultiTrackUploaderTask() as object
    this = BaseTestSuite()
    this.Name = "MultiTrackUploaderTask"

    this.addTest("WhenInit_UploadsExistingFile_202", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_202, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_2xx", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_2xx, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_400", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_400, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_401", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_401, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_403", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_403, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_408", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_408, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_413", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_413, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_429", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_429, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_4xx", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_4xx, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_500", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_500, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_503", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_503, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadsExistingFile_5xx", MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_5xx, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)

    this.addTest("WhenInit_IgnoreRecentFile", MultiTrackUploaderTaskTest__WhenInit_IgnoreRecentFile, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)
    this.addTest("WhenInit_UploadFilesFromMultipleTracks", MultiTrackUploaderTaskTest__WhenInit_UploadFilesFromMultipleTracks, MultiTrackUploaderTaskTest__SetUp, MultiTrackUploaderTaskTest__TearDown)

    this.testUploader = __testUploader

    return this
end function

sub MultiTrackUploaderTaskTest__SetUp()
    ' Mocks
    m.testSuite.mockNetworkClient = CreateObject("roSGNode", "MockNetworkClient")

    ' Fake data
    m.testSuite.fakeTrackType = IG_GetString(10)
    m.testSuite.fakeUrl = "https://" + IG_GetString(10) + "." + IG_GetString(3) + "/" + IG_GetString(10)
    m.testSuite.fakeClientToken = "pub" + IG_GetString(32)
    m.testSuite.fakeWaitPeriodMs = 10
    m.testSuite.fakePrefix = IG_GetString(3)
    m.testSuite.fakePostfix = IG_GetString(3)
    m.testSuite.fakeContentType = IG_GetString(32)
    m.testSuite.fakeQueryParams = {}
    for i = 0 to 3
        m.testSuite.fakeQueryParams[IG_GetString(8)] = IG_GetString(16)
    end for

    ' Tested Task
    m.testSuite.testedTask = CreateObject("roSGNode", "datadogroku_MultiTrackUploaderTask")
    m.testSuite.testedTask.clientToken = m.testSuite.fakeClientToken
    m.testSuite.testedTask.waitPeriodMs = m.testSuite.fakeWaitPeriodMs
    m.testSuite.testedTask.networkClient = m.testSuite.mockNetworkClient
    tracks = {}
    tracks[IG_GetString(8)] = {
        trackType: m.testSuite.fakeTrackType,
        url: m.testSuite.fakeUrl,
        payloadPrefix: m.testSuite.fakePrefix,
        payloadPostfix: m.testSuite.fakePostfix,
        contentType: m.testSuite.fakeContentType,
        queryParams: m.testSuite.fakeQueryParams
    }
    m.testSuite.testedTask.tracks = tracks
end sub

sub MultiTrackUploaderTaskTest__TearDown()
    m.testSuite.testedTask.control = "STOP"
    m.testSuite.Delete("mockNetworkClient")
    m.testSuite.Delete("testedTask")
end sub

'----------------------------------------------------------------
' Given: an uploader and an uploadable file
'  When: waiting for the loop to run
'  Then: the file is uploaded and deleted
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_202() as string
    return m.testUploader(202, false)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file
'  When: waiting for the loop to run
'  Then: the file is uploaded and deleted
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_2xx() as string
    responseCode = IG_GetOneOf([200, 201, IG_GetIntegerInRange(203, 299)])
    return m.testUploader(responseCode, false)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file, an invalid file (400)
'  When: waiting for the loop to run
'  Then: the file is uploaded and deleted
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_400() as string
    return m.testUploader(400, false)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file, an invalid token (401)
'  When: waiting for the loop to run
'  Then: the file is uploaded and deleted
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_401() as string
    return m.testUploader(401, false)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file, an invalid token (403)
'  When: waiting for the loop to run
'  Then: the file is uploaded and deleted
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_403() as string
    return m.testUploader(403, false)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file, an slow network (408)
'  When: waiting for the loop to run
'  Then: the file is uploaded and kept for retry
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_408() as string
    return m.testUploader(408, true)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file but too large (413)
'  When: waiting for the loop to run
'  Then: the file is uploaded and deleted
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_413() as string
    return m.testUploader(413, false)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file but too many requests (429)
'  When: waiting for the loop to run
'  Then: the file is uploaded and kept for retry
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_429() as string
    return m.testUploader(429, true)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file but too large (4xx)
'  When: waiting for the loop to run
'  Then: the file is uploaded and deleted
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_4xx() as string
    responseCode = IG_GetOneOf([402, IG_GetIntegerInRange(404, 407), IG_GetIntegerInRange(409, 412), IG_GetIntegerInRange(414, 428), IG_GetIntegerInRange(430, 499)])
    return m.testUploader(responseCode, false)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file, server failing (500)
'  When: waiting for the loop to run
'  Then: the file is uploaded and kept for retry
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_500() as string
    return m.testUploader(500, true)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file, server overloaded (503)
'  When: waiting for the loop to run
'  Then: the file is uploaded and kept for retry
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_503() as string
    return m.testUploader(503, true)
end function

'----------------------------------------------------------------
' Given: an uploader and an uploadable file, unknown server error (5xx)
'  When: waiting for the loop to run
'  Then: the file is uploaded and kept for retry
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadsExistingFile_5xx() as string
    responseCode = IG_GetOneOf([IG_GetIntegerInRange(501, 502), IG_GetIntegerInRange(504, 599)])
    return m.testUploader(responseCode, true)
end function

'----------------------------------------------------------------
' Given: an uploader and a non-uploadable file
'  When: waiting for the loop to run
'  Then: the file is not uploaded and kept
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_IgnoreRecentFile() as string
    ' Given
    folderPath = datadogroku_trackFolderPath(m.fakeTrackType)
    currentTimeStamp& = datadogroku_getTimestamp()
    filePath = folderPath + "/" + currentTimeStamp&.toStr()
    m.mockNetworkClient@.stubCall("postFromFile", {}, 202)
    datadogroku_mkdirs(folderPath)
    WriteAsciiFile(filePath, IG_GetString(128))

    ' When
    sleep(100)

    ' Then
    Assert.that(CreateObject("roFileSystem").Exists(filePath)).isTrue("Expected file " + filePath + " to still be present")
    return m.mockNetworkClient@.assertNoInteractions()
end function

'----------------------------------------------------------------
' Given: an uploader and a non-uploadable file
'  When: waiting for the loop to run
'  Then: the file is not uploaded and kept
'----------------------------------------------------------------
function MultiTrackUploaderTaskTest__WhenInit_UploadFilesFromMultipleTracks() as string
    ' Given
    fakeTrack2 = IG_GetString(8)
    fakeUrl2 = "https://" + IG_GetString(10) + "." + IG_GetString(3) + "/" + IG_GetString(10)
    fakePrefix2 = IG_GetString(3)
    fakePostfix2 = IG_GetString(3)
    fakeContentType2 = IG_GetString(16)
    tracks = m.testedTask.tracks
    tracks[IG_GetString(8)] = {
        trackType: fakeTrack2,
        url: fakeUrl2,
        payloadPrefix: fakePrefix2,
        payloadPostfix: fakePostfix2,
        contentType: fakeContentType2,
        queryParams: {}
    }
    m.testedTask.tracks = tracks
    folderPath1 = datadogroku_trackFolderPath(m.fakeTrackType)
    folderPath2 = datadogroku_trackFolderPath(fakeTrack2)
    filePath1 = folderPath1 + "/" + IG_GetInteger(65536).toStr()
    filePath2 = folderPath2 + "/" + IG_GetInteger(65536).toStr()
    expectedHeaders1 = __buildExpectedHeaders(m.fakeClientToken, m.fakeContentType)
    expectedHeaders2 = __buildExpectedHeaders(m.fakeClientToken, fakeContentType2)
    expectedCallArgs1 = { filePath: filePath1, headers: expectedHeaders1, payloadPrefix: m.fakePrefix, payloadPostfix: m.fakePostfix }
    expectedCallArgs2 = { url: fakeUrl2, filePath: filePath2, headers: expectedHeaders2, payloadPrefix: fakePrefix2, payloadPostfix: fakePostfix2 }
    m.mockNetworkClient@.stubCall("postFromFile", {}, 202)
    datadogroku_mkdirs(folderPath1)
    datadogroku_mkdirs(folderPath2)
    WriteAsciiFile(filePath1, IG_GetString(128))
    WriteAsciiFile(filePath2, IG_GetString(128))

    ' When
    sleep(100)

    ' Then
    Assert.that(CreateObject("roFileSystem").Exists(filePath1)).isFalse("Expected file " + filePath1 + " to be deleted")
    Assert.that(CreateObject("roFileSystem").Exists(filePath2)).isFalse("Expected file " + filePath2 + " to be deleted")
    return m.multipleAssertions([
        m.mockNetworkClient@.assertFunctionCalled("postFromFile", expectedCallArgs1),
        m.mockNetworkClient@.assertFunctionCalled("postFromFile", expectedCallArgs2),
    ])
end function

'----------------------------------------------------------------
' Run a basic test
'  - write a file in an expected location
'  - check that the file is uploaded
'  - check that the status code is handled appropriately
'----------------------------------------------------------------
function __testUploader(statusCode as integer, keepFile as boolean) as string
    datadogroku_ddLogInfo("__testUploader")
    ' Given
    folderPath = datadogroku_trackFolderPath(m.fakeTrackType)
    filePath = folderPath + "/" + IG_GetInteger(65536).toStr()
    expectedBaseUrl = m.fakeUrl
    expectedHeaders = __buildExpectedHeaders(m.fakeClientToken, m.fakeContentType)
    expectedCallArgs = { filePath: filePath, headers: expectedHeaders, payloadPrefix: m.fakePrefix, payloadPostfix: m.fakePostfix }
    m.mockNetworkClient@.stubCall("postFromFile", expectedCallArgs, statusCode)
    datadogroku_mkdirs(folderPath)
    WriteAsciiFile(filePath, IG_GetString(128))
    datadogroku_ddLogInfo("Wrote data at " + filePath)

    ' When
    sleep(75)

    ' Then
    calls = m.mockNetworkClient@.captureFunctionCalls("postFromFile", expectedCallArgs)
    firstCall = calls[0]
    Assert.that(calls).isNotInvalid()
    Assert.that(CreateObject("roFileSystem").Exists(filePath)).isEqualTo(keepFile)
    Assert.that(firstCall.url).hasSubstring(expectedBaseUrl)

    if (keepFile)
        Assert.that(calls.count()).isGreaterThan(1)
    else
        Assert.that(calls).hasSize(1)
    end if

    for each key in m.fakeQueryParams
        Assert.that(firstCall.url).hasSubstring(firstCall.url, key + "=" + m.fakeQueryParams[key])
    end for

    return ""
end function

'----------------------------------------------------------------
' Utility building the expected headers for each requests
' @return (object) an associative array with the upload request
'     headers
'----------------------------------------------------------------
function __buildExpectedHeaders(clientToken as string, contentType as string) as object
    headers = {}
    headers["Content-Type"] = contentType
    headers["DD-API-KEY"] = clientToken
    headers["DD-EVP-ORIGIN"] = datadogroku_agentSource()
    headers["DD-EVP-ORIGIN-VERSION"] = datadogroku_sdkVersion()
    return headers
end function
