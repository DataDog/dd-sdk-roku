' Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
' This product includes software developed at Datadog (https://www.datadoghq.com/).
' Copyright 2022-Today Datadog, Inc.

' ----------------------------------------------------------------
' Main entry point for the sample app
' @param args (dynamic) arguments passed by the OS when starting the channel
' ----------------------------------------------------------------
sub RunUserInterface(args as dynamic)
    ' Create Port
    m.port = CreateObject("roMessagePort")

    ' Create Screen
    screen = CreateObject("roSGScreen")
    screen.setMessagePort(m.port)
    globalNode = screen.getGlobalNode()
    credentials = parseJson(readAsciiFile("pkg:/credentials.json"))
    globalNode.addFields({
        datadogVerbosity: 5,
        datadogOrgName: credentials.orgName,
        datadogOrgId: credentials.orgId,
        datadogSite: credentials.site,
        mirrorUrl: credentials.mirrorUrl,
        mirrorHosts: credentials.mirrorHosts,
        launchContentId: args.contentId,
        launchMediaType: args.mediaType
    })

    ' Create Scene
    scene = screen.CreateScene("MainScene")

    ' Show the screen
    screen.show()

    ' Setup Datadog
    datadogroku_initialize({
        clientToken: credentials.datadogClientToken,
        applicationId: credentials.datadogApplicationId,
        site: credentials.site,
        env: "prod",
        launchArgs: args
    }, globalNode)
    globalNode.setField("datadogUserInfo", { id: 42, name: "Abcd Efg", email: "abcd.efg@example.com" })
    globalNode.setField("datadogContext", { channel: "roku sample channel" })

    ' initialize a first view
    globalNode.datadogRumAgent@.startView("MainView", "main")

    ' Handle roInput (deeplink changes at runtime)
    input = CreateObject("roInput")
    input.setMessagePort(m.port)

    ' Handle roSystemLogEvent
    sysLog = CreateObject("roSystemLog")
    sysLog.setMessagePort(m.port)
    sysLog.enableType("http.error")
    sysLog.enableType("http.complete")

    ' Signal app launch complete
    scene.signalBeacon("AppLaunchComplete")

    ' main loop
    while(true)
        msg = wait(0, m.port)
        msgType = type(msg)

        if (msgType = "roSGScreenEvent")
            if (msg.isScreenClosed())
                return
            end if
        else if (msgType = "roSystemLogEvent")
            sysLogEvent = msg.getInfo()
            datadogroku_ddLogInfo("Received system event: " + sysLogEvent.LogType)
            globalNode.datadogRumAgent@.addResource(sysLogEvent)
        else if (msgType = "roInputEvent")
            datadogroku_ddLogInfo("Received input event" + msg.getInfo())
        end if
    end while

end sub
